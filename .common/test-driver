#!/bin/bash
##( header
# Test driver for zap-sh
# Runs predefined test suites for all zap-sh components
##) header

##( configuration
set -euo pipefail
##) configuration

##( globals
# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Counters
TOTAL_TESTS=0
PASSED_TESTS=0
FAILED_TESTS=0
SKIPPED_TESTS=0

# Arrays to track results
PASSED_LIST=()
FAILED_LIST=()
SKIPPED_LIST=()

# Get script directory and project root
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"

# Test suite definitions: "test_file:description"
readonly TEST_SUITES=(
    "test-template-basic.sh:Basic Template Tests"
    "test-template-enhanced.sh:Enhanced Template Tests"
    "test-zap.sh:Zap Generator Tests"
    "test-bash32-compat.sh:Bash 3.2 Compatibility Tests"
)
##) globals

##( helpers
# Function to print colored output
print_status() {
    local status=$1
    local message=$2
    case $status in
        "INFO")  echo -e "${BLUE}[INFO]${NC} $message" ;;
        "PASS")  echo -e "${GREEN}[PASS]${NC} $message" ;;
        "FAIL")  echo -e "${RED}[FAIL]${NC} $message" ;;
        "SKIP")  echo -e "${YELLOW}[SKIP]${NC} $message" ;;
        "WARN")  echo -e "${YELLOW}[WARN]${NC} $message" ;;
    esac
}

# Function to print banner
print_banner() {
    echo
    echo "=============================================="
    echo "           ‚ö° ZAP-SH TEST RUNNER ‚ö°"
    echo "=============================================="
    echo
}

# Function to print summary
print_summary() {
    echo
    echo "=============================================="
    echo "                 SUMMARY"
    echo "=============================================="
    echo "Total test suites: $TOTAL_TESTS"
    echo "Passed: $PASSED_TESTS"
    echo "Failed: $FAILED_TESTS"
    echo "Skipped: $SKIPPED_TESTS"
    echo

    if [ ${#PASSED_LIST[@]} -gt 0 ]; then
        print_status "PASS" "Passed: ${PASSED_LIST[*]}"
    fi

    if [ ${#FAILED_LIST[@]} -gt 0 ]; then
        print_status "FAIL" "Failed: ${FAILED_LIST[*]}"
    fi

    if [ ${#SKIPPED_LIST[@]} -gt 0 ]; then
        print_status "SKIP" "Skipped: ${SKIPPED_LIST[*]}"
    fi

    echo
    if [ $FAILED_TESTS -eq 0 ] && [ $TOTAL_TESTS -gt 0 ]; then
        print_status "PASS" "All test suites completed successfully! üéâ"
        return 0
    elif [ $TOTAL_TESTS -eq 0 ]; then
        print_status "FAIL" "No test suites were found! ‚ùå"
        return 1
    else
        print_status "FAIL" "Some test suites failed! ‚ùå"
        return 1
    fi
}

# Function to run a single test suite
run_test_suite() {
    local test_name=$1
    local test_desc=$2
    local test_file="$PROJECT_ROOT/$test_name"

    echo
    echo "----------------------------------------------"
    echo "Testing: $test_desc"
    echo "Test suite: $test_name"
    echo "----------------------------------------------"

    # Check if test file exists
    if [ ! -f "$test_file" ]; then
        print_status "SKIP" "Test file $test_file does not exist"
        SKIPPED_TESTS=$((SKIPPED_TESTS + 1))
        SKIPPED_LIST+=("$test_desc")
        return
    fi

    # Check if test file is executable
    if [ ! -x "$test_file" ]; then
        print_status "WARN" "Test file is not executable, making it executable..."
        chmod +x "$test_file"
    fi

    # Run the test suite
    print_status "INFO" "Running $test_desc..."
    
    if (cd "$PROJECT_ROOT" && "./$test_name"); then
        print_status "PASS" "$test_desc completed successfully"
        PASSED_TESTS=$((PASSED_TESTS + 1))
        PASSED_LIST+=("$test_desc")
    else
        print_status "FAIL" "$test_desc failed"
        FAILED_TESTS=$((FAILED_TESTS + 1))
        FAILED_LIST+=("$test_desc")
    fi
}
##) helpers

##( core
# Main execution
main() {
    print_banner
    
    print_status "INFO" "Running zap-sh test suites..."
    echo

    # Process each test suite from the array
    for test_suite in "${TEST_SUITES[@]}"; do
        # Split on colon to get test file and description
        local test_name="${test_suite%%:*}"
        local test_desc="${test_suite##*:}"
        
        # Trim whitespace
        test_name=$(echo "$test_name" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
        test_desc=$(echo "$test_desc" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
        
        # Skip if test_name is empty
        [[ -z "$test_name" ]] && continue
        
        TOTAL_TESTS=$((TOTAL_TESTS + 1))
        run_test_suite "$test_name" "$test_desc"
    done

    # Handle case where no tests were processed
    if [ $TOTAL_TESTS -eq 0 ]; then
        print_status "WARN" "No test suites configured!"
        print_status "INFO" "Check TEST_SUITES array in $0"
        exit 1
    fi

    # Print summary and exit with appropriate code
    if print_summary; then
        exit 0
    else
        exit 1
    fi
}

# Handle script arguments
case "${1:-}" in
    "-h"|"--help")
        echo "Usage: $0 [OPTIONS]"
        echo ""
        echo "Test runner for zap-sh"
        echo ""
        echo "Options:"
        echo "  -h, --help    Show this help message"
        echo "  -v, --verbose Enable verbose output"
        echo "  -l, --list    List configured test suites"
        echo ""
        echo "Configured Test Suites:"
        for test_suite in "${TEST_SUITES[@]}"; do
            test_name="${test_suite%%:*}"
            test_desc="${test_suite##*:}"
            printf "  %-20s %s\n" "$test_name" "$test_desc"
        done
        exit 0
        ;;
    "-v"|"--verbose")
        set -x
        ;;
    "-l"|"--list")
        echo "Configured Test Suites:"
        for test_suite in "${TEST_SUITES[@]}"; do
            test_name="${test_suite%%:*}"
            test_desc="${test_suite##*:}"
            printf "  %-20s %s\n" "$test_name" "$test_desc"
        done
        exit 0
        ;;
esac

# Run main function
main "$@"
##) core